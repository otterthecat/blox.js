/*! Blox JS - v0.1.0 - 2013-02-03
* https://github.com/otterthecat/blox.js
* Copyright (c) 2013 Otter the Cat; Licensed MIT, GPL */
(function(a){var b=function(a,b){var c=document.createElement("script");c.type="text/javascript",c.src=a;var d=this;c.onload=function(){b.fn.call(b.scope,b.arg)},document.getElementsByTagName("body")[0].appendChild(c)},c=function(a){this.document=window.document,this.includes={},this.funcs={},this.args={},this.vars={},this.config={devMode:!0,scripts:[],preventVarOverride:!0},this.subscribers={},this.testables=[],this.utils={merge:function(a,b){for(var c in b)c!=="merge"?a[c]=b[c]:this.dbug("warn","[merge] is not replaceable in blox, ignoring %o",c);return a},assert:function(a){return this.config.devMode?(this.dbug("warn","Assert ["+a.namespace+"]: "+a.testValue+" === "+a.assertValue),a.testValue===a.assertValue?(this.dbug("info","PASS : "+a.testValue+" === "+a.assertValue),!0):(this.dbug("error","FAIL : "+a.testValue+" !== "+a.assertValue),!1)):null}},this.init(a)};c.prototype={init:function(a){return typeof a=="object"&&this.utils.merge(this.config,a),this},setUtils:function(a){var b=this.utils;return b.merge(b,a),this},launch:function(){var a=this;this.document.addEventListener?this.document.addEventListener("DOMContentLoaded",function(){return a.exec()},!1):window.onload=function(){return a.exec()}},exec:function(a){if(!a){if(!this.config.devMode)for(var c in this.funcs)if(this.includes.hasOwnProperty(c)&&typeof this.includes[c]=="string"){var d=this;b(this.includes[c],{fn:d.funcs[c],scope:d,arg:d.args[c]||undefined})}else this.funcs[c].call(this,this.args[c]||undefined);if(this.config.devMode){var e=this.testables;for(var f=0;f<e.length;f++){var g=e[f];typeof g.inc=="string"&&g.inc.length>0?b(g.inc,{fn:this.utils.assert,scope:this,arg:{namespace:g.namespace,testValue:g.fn.call(this),assertValue:typeof g.assert=="function"?g.assert():g.assert}}):this.utils.assert({namespace:g.namespace,testValue:g.fn.call(this),assertValue:typeof g.assert=="function"?g.assert():g.assert})}}return this}return this.funcs.hasOwnProperty(a)?(this.funcs[a](this.args[a]||undefined),this):(this.dbug("warn","BLOX does not have requested namespace [%s].",a),!1)},v:function(a,b){if(typeof a=="string"&&typeof b!="undefined")return this.vars.hasOwnProperty(a)||(this.vars[a]=b),this;if(typeof a=="string"&&typeof b=="undefined")return this.vars[a];if(typeof a=="object")return this.vars.hasOwnProperty(a.name)||(this.vars[a.name]=a.value),this},add:function(a){var b=this.testables;return!this.funcs.hasOwnProperty(a.namespace)&&a.arg!==undefined?(this.funcs[a.namespace]=a.fn,this.args[a.namespace]=a.arg,this.includes[a.namespace]=a.inc,this):this.funcs.hasOwnProperty(a.namespace)?(this.dbug("error","BLOX already contains namespace [%s].",a.namespace),!1):(this.funcs[a.namespace]=a.fn,this.includes[a.namespace]=a.inc,b.push({inc:a.inc,namespace:a.namespace,fn:a.fn,assert:a.assert}),this)},remove:function(a){return delete this.funcs[a],delete this.args[a],this},subscribe:function(a,b){return this.subscribers[a]||(this.subscribers[a]=[]),this.subscribers[a].push(b),this},unsubscribe:function(a,b){for(var c=0;c<this.subscribers[a].length;c++)this.subscribers[a][c]===b&&this.subscribers[a].splice(c,1);return this},publish:function(a,b){for(var c in this.subscribers[a])this.subscribers[a][c](b||undefined);return this},dbug:function(a,b,c){if(!window.console||!this.config.devMode)return this;switch(a){case"info":window.console.info(b,c||undefined);break;case"log":window.console.log(b,c||undefined);break;case"warn":window.console.warn(b,c||undefined);break;case"error":window.console.error(b,c||undefined),window.console.log("+++ Start Stack Trace +++"),window.console.trace(),window.console.log("+++ End Stack Trace +++");break;default:window.console.error('DOH! BLOX.dbug passed unavailable level [%s]. Try "info", "log", "warn" or "error"',a)}return this}},window.BLOX=c})();